 /*A matrix used for prediction of next state matrix -- just for factoring in naive estimation into the 
     		next position state matrix
	    	Format: { 
      		{ 1 0 0 d 0 0}
	 	{ 0 1 0 0 d 0}
    		{ 0 0 1 0 0 d}
       		{ 0 0 0 1 0 0}
		{ 0 0 0 0 1 0}
   		{ 0 0 0 0 0 1}
     			}
			where d = dt 
     		*/

//[6 x 6] * [6 x 1] = [6 x 1]
            x = A * x;
	//  P = [6 x 6] * [6 x 6] * [6 x 6] + [6 x 6]

/*H matrix 
	    	Format:{ 
      			{ 1 0 0 0 0 0}
	 		{ 0 1 0 0 0 0}
    			{ 0 0 1 0 0 0}
     			}
     		*/

/* S is divisor for Kalman Gain separated to be able to use inverse function
     	       H    *    P    *  H.inv     +    R
	    [3 x 6] * [6 x 6] * [6 x 3]  + [3 x 3]
     	         [3 x 6] * [6 x 3]       + [3 x 3]
	       	      [3 x 3]      +       [3 x 3]
	    S = 	        [3 x 3]
     		*/

/* K is kalman gain 
	       K =   P     *   H.inv   /     S    
		  [6 x 6]  *  [6 x 3]  /  [3 x 3]
 	                [6 x 3]        /  [3 x 3]
	       K =              [6 x 3]
 		*/

/* y = [3 x 1] - [3 x 6] * [6 x 1]
  			[3 x 1] - [3 x 1]
		/* x = [6 x 1] + [6 x 3] * ([3 x 1])
  			[6 x 1] + [6 x 3] *([3 x 1])
     			[6 x 1] + [6 x 1]
  		*/
	    //New State x
            x = x + K * y;
		
		/* P = ([6 x 6] - [6 x 6] * [6 x 6]) * [6 x 6]
			     [6 x 6] * [6 x 6]
		   P =            [6 x 6]
		*/
	//I is identity matrix <6 , 6> 

/*Find out state variance-covariance matrix = P-- using identity matrix for now
   			6 x 6 because of three states and three velocities for each of those states
			P Format: 
   				1  0  0  0  0  0 
       				0  1  0  0  0  0
				0  0  1  0  0  0
    				0  0  0  1  0  0
				0  0  0  0  1  0
    				0  0  0  0  0  1
   			*/
